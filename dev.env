# this is an example environment variable file for rootski;
# for production, create a file called prod.env in the same folder
# as this file and run deploy.sh. To deploy locally using the values
# in *this* file, run deploy-local.sh

# traefik labels
TRAEFIK__CERT_RESOLVER=letsencrypt-staging-http
TRAEFIK__ROOTSKI_DOMAIN=rootski.localhost
TRAEFIK__ROOTSKI_API_SUBDOMAIN=api
TRAEFIK__TRAEFIK_UI_SUBDOMAIN=traefik
TRAEFIK__PGADMIN_UI_SUBDOMAIN=dbadmin
TRAEFIK__PORTAINER_UI_SUBDOMAIN=docker


# basic auth credentials; from username and password pairs, we
# derive a string of the for "user:<bcrypt hashed password>" and
# export them to TRAEFIK__<service>_BCRYPT_USER_PASSWORD"
TRAEFIK__ROOTSKI_DOCS_USER=rootski
TRAEFIK__ROOTSKI_DOCS_PASSWORD=password
TRAEFIK__TRAEFIK_UI_USER=traefik
TRAEFIK__TRAEFIK_UI_PASSWORD=password
TRAEFIK__PGADMIN_USER=pgadmin
TRAEFIK__PGADMIN_PASSWORD=password

# Traefik AWS Credentials for DNS Challenge
TRAEFIK__ROUTE53_HOSTED_ZONE_ID=Z0480263O8FVW1V217HR
# These two variables will be set by make.xsh; it will look
# for a profile in your ~/.aws/credentials file called "rootski"
# and export those to these values.
# TRAEFIK__AWS_ACCESS_KEY_ID=...
# TRAEFIK__AWS_SECRET_ACCESS_KEY=...

# postgres service
POSTGRES_USER=rootski
POSTGRES_PASSWORD=pass
POSTGRES_DB=rootski_db
POSTGRES_PORT=5432

# rootski_api service
ROOTSKI__POSTGRES_PORT=5432
ROOTSKI__POSTGRES_USER=rootski
ROOTSKI__POSTGRES_PASSWORD=pass
ROOTSKI__POSTGRES_DB=rootski_db
ROOTSKI__PORT=80
ROOTSKI__NUM_WORKERS=1

# rootski frontend (not in docker-compose.yml)
# changing this would have an impact on docker-compose.yml
# these variables must each begin with "REACT_APP_"
REACT_APP__BACKEND_URL=http://api.rootski.localhost

PGADMIN_DEFAULT_EMAIL=ops@rootski.io
PGADMIN_DEFAULT_PASSWORD=rootski
# PGADMIN_ENABLE_TLS <-- leave this unset! Traefik handles this for us.
